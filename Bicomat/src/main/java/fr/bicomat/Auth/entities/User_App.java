package fr.bicomat.Auth.entities;
// Generated 17 nov. 2018 à 15:27:30 by Hibernate Tools 5.2.11.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * UserApp generated by hbm2java
 */
@Entity
@Table(name = "USER_APP", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "sso_id") })
public class User_App implements java.io.Serializable {

	/**
	 * Numéro de sérialisation. 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Identifiant de user.
	 */
	private Integer id;

	/**
	 * Login du user.
	 */
	private String ssoId;

	/**
	 * Mot de passe.
	 */
	private String password;

	/**
	 * Prénom de la personne.
	 */
	private String firstName;

	/**
	 * Nom de famille. 
	 */
	private String lastName;

	/**
	 * Email de l'utilisateur.
	 */
	private String email;
	
	/**
	 * Etat de l'utilisateur.
	 */
	private String state = State.PROVISIONAL.getState();
	
	/**
	 * Nombre d'Essai en erreur.
	 */
	private Integer nbTry = 0;
	
	/**
	 * Réponse à la question.
	 */
	private String answer;
	
	/**
	 * Réponse à la question.
	 */
	private UserQuestion userQuestion;
	
	/**
	 * Identifiant de la fiche client.
	 */
	private Integer idClient ;
	
	/**
	 * Identifiant de l'employe.
	 */
	private Integer idEmploye ;
	
	/**
	 * Profile de l'utilisateur.
	 */
	private Set<UserProfile> userProfiles = new HashSet<UserProfile>(0);

	/**
	 * Constructeur par défaut.
	 */
	public User_App() {
	}

	/**
	 * Création d'un profil.
	 * @param ssoId Login de l'utilisateur.
	 * @param password mot de passe.
	 * @param firstName Prénom.
	 * @param lastName nom de famille.
	 * @param email email de la personne.
	 */
	public User_App(String ssoId, String password, String firstName, String lastName, String email) {
		this.ssoId = ssoId;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
	}

	/*public User(String ssoId, String password, String firstName, String lastName, String email,
			Set<UserProfile> userProfiles) {
		this.ssoId = ssoId;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.userProfiles = userProfiles;
	}*/

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer userId) {
		this.id = userId;
	}

	@Column(name = "sso_id", unique = true, nullable = false, length = 30)
	public String getSsoId() {
		return this.ssoId;
	}

	public void setSsoId(String ssoId) {
		this.ssoId = ssoId;
	}

	@Column(name = "password", nullable = false, length = 100)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "first_name", nullable = false, length = 30)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 30)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", nullable = false, length = 30)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "state", nullable = false, length = 30)
	public String getState() {
		return this.state;
	}

	public void setState(String state) {
		this.state = state;
	}
	
	
	
	@Column(name = "answer", nullable = true, length = 30)
	public String getAnswer() {
		return this.answer;
	}

	public void setAnswer(String answer) {
		this.answer = answer;
	}
	/**
	 * Identifiant de la fiche client.
	 */
	
	@Column(name = "id_client", nullable = true, length = 8)
	public Integer getIdClient() {
		return this.idClient;
	}

	public void setIdClient(Integer id) {
		this.idClient = id;
	}
	
	@Column(name = "id_interne", nullable = true, length = 8)
	public Integer getIdEmploye() {
		return this.idEmploye;
	}

	public void setIdEmploye(Integer id) {
		this.idEmploye = id;
	}
	/**
	 * Nombre d'Essai en erreur.
	 */

	@Column(name = "nbTry", nullable = true)
	public Integer getNbTry() {
		return this.nbTry;
	}

	public void setNbTry(Integer nb) {
		this.nbTry = nb;
	}
	
	/**
	 * Réponse à la question.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_question_question_id")
	public UserQuestion getUserQuestion() {
		return this.userQuestion;
	}

	public void setUserQuestion(UserQuestion userQuestion) {
		this.userQuestion = userQuestion;
	}
	
	

	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "APP_USER_USER_PROFILE", joinColumns = {
			@JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_profile_id", nullable = false, updatable = false) })
	public Set<UserProfile> getUserProfiles() {
		return this.userProfiles;
	}

	public void setUserProfiles(Set<UserProfile> userProfiles) {
		this.userProfiles = userProfiles;
	}
	
	
	@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((ssoId == null) ? 0 : ssoId.hashCode());
        return result;
    }
 
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof User_App))
            return false;
        User_App other = (User_App) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (ssoId == null) {
            if (other.ssoId != null)
                return false;
        } else if (!ssoId.equals(other.ssoId))
            return false;
        return true;
    }
 
	 /*
     * DO-NOT-INCLUDE passwords in toString function.
     * It is done here just for convenience purpose.
     */
    @Override
    public String toString() {
        return "User [id=" + id + ", ssoId=" + ssoId + ", password=" + password
                + ", firstName=" + firstName + ", lastName=" + lastName
                + ", email=" + email + ", state=" + state + "]";
    }
}
