package fr.bicomat.entities;
// default package
// Generated 8 déc. 2018 07:10:38 by Hibernate Tools 5.2.11.Final

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import fr.bicomat.Auth.entities.User_App;

/**
 * Virement generated by hbm2java
 */
@Entity
@Table(name = "virement")
public class Virement implements java.io.Serializable {

	/**
	 * Identifiant de la serialisation.
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Identifiant du virement
	 */
	private Long idvirement;
	
	/**
	 * Client qui gére le virement. 
	 */
	private Client client;
	
	/**
	 * Compte créditeur.
	 */
	private Compte compteByCompteCrediteur;

	/**
	 * Compte débiteur.
	 */
	private Compte compteByCompteDebiteur;
	
	/**
	 * Date de la création du prélévement.
	 */
	private Date dateCreation;
	
	/**
	 * Type de virement. 
	 */
	private String typeVirement = TypeVirement.PONCTUEL.getCode();
	
	/**
	 * Date à partir de laquelle le prélèvement est actif. 
	 */
	private Date dateEcheance;
	
	/**
	 * Date du dernier prélévement. 
	 */
	private Date dateLastPrelevement;
	
	/**
	 * Date de fin du prélévement. 
	 */
	private Date dateFinPrelevement;
	
	/**
	 * Prélévement est actif. 
	 */
	private boolean actif = false;
	
	/**
	 * Montant à prélever.
	 */
	private double montant;

	/**
	 * Constructeur du prélévement.
	 */
	public Virement() {
	}

	/**
	 * Constructeur du prélévement. 
	 * @param client Client qui a créé le prélévement.
	 * @param compteByCompteCrediteur Compte à débiter.
	 * @param compteByCompteDebiteur Compte à créditer.
	 * @param dateCreation Date de la création du prélévement.
	 * @param typeVirement type de prélévement.
	 * @param dateEcheance Date d'application.
	 */
	public Virement(Client client, Compte compteByCompteCrediteur, Compte compteByCompteDebiteur, Date dateCreation,
			String typeVirement, Date dateEcheance) {
		this.client = client;
		this.compteByCompteCrediteur = compteByCompteCrediteur;
		this.compteByCompteDebiteur = compteByCompteDebiteur;
		this.dateCreation = dateCreation;
		this.typeVirement = typeVirement;
		this.dateEcheance = dateEcheance;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idvirement", unique = true, nullable = false)
	public Long getIdvirement() {
		return this.idvirement;
	}

	public void setIdvirement(Long idvirement) {
		this.idvirement = idvirement;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "client_idclient", nullable = false)
	public Client getClient() {
		return this.client;
	}

	public void setClient(Client client) {
		this.client = client;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "compte_Crediteur", nullable = false)
	public Compte getCompteByCompteCrediteur() {
		return this.compteByCompteCrediteur;
	}

	public void setCompteByCompteCrediteur(Compte compteByCompteCrediteur) {
		this.compteByCompteCrediteur = compteByCompteCrediteur;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "compte_Debiteur", nullable = false)
	public Compte getCompteByCompteDebiteur() {
		return this.compteByCompteDebiteur;
	}

	public void setCompteByCompteDebiteur(Compte compteByCompteDebiteur) {
		this.compteByCompteDebiteur = compteByCompteDebiteur;
	}
	@Temporal(TemporalType.DATE)
	@Column(name = "dateCreation", nullable = false, length = 19)
	public Date getDateCreation() {
		return this.dateCreation;
	}

	public void setDateCreation(Date dateCreation) {
		this.dateCreation = dateCreation;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dateLast", nullable = true, length = 19)
	public Date getDateLastPrelevement() {
		return this.dateLastPrelevement;
	}

	public void setDateLastPrelevement(Date lastprelevement) {
		this.dateLastPrelevement = lastprelevement;
	}

	@Column(name = "typeVirement", nullable = false, length = 5)
	public String getTypeVirement() {
		return this.typeVirement;
	}

	public void setTypeVirement(String typeVirement) {
		this.typeVirement = typeVirement;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "dateEcheance", nullable = false, length = 19)
	public Date getDateEcheance() {
		return this.dateEcheance;
	}

	public void setDateEcheance(Date dateEcheance) {
		this.dateEcheance = dateEcheance;
	}
	
	@Column(name = "montant", nullable = false, precision = 22, scale = 0)
	public double getMontant() {
		return this.montant;
	}

	public void setMontant(double montant) {
		this.montant = montant;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dateEnd", nullable = true, length = 19)
	public Date getDateFinPrelevement() {
		return this.dateFinPrelevement;
	}

	public void setDateFinPrelevement(Date dateFinPrelevement) {
		this.dateFinPrelevement = dateFinPrelevement;
	}
	
	@Column(name = "actif", nullable = false, columnDefinition = "TINYINT", length = 1)
	public boolean getActif() {
		return this.actif;
	}

	public void setActif(boolean actif) {
		this.actif = actif;
	}
	@Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((idvirement== null) ? 0 : idvirement.hashCode());
        return result;
    }
 
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Virement))
            return false;
        Virement other = (Virement) obj;
        if (idvirement == null) {
            if (other.idvirement != null) {
                return false; }
        } else if (!idvirement.equals(other.idvirement)) {
            return false;
            }
        return true;
    }	
}
